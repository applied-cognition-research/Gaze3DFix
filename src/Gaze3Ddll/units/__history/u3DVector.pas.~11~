unit u3DVector;
{
  Vector Unit
  ===========
    Sascha Weber 12.05.2016
}

interface

uses
  Windows, Messages, SysUtils, Classes, Graphics, Controls, Forms, Dialogs,
  StdCtrls, CodeSiteLogging;

type TVector = record
              x1: Double;
              x2: Double;
              x3: Double;
     End;

     function vector(x1, x2, x3: Double): TVector;
     function vAddition(a, b: TVector):TVector;
     function vSubtraction(a, b: TVector):TVector;
     function sMultiplication(t: Double; a: TVector):TVector;
     function vMakeDirVector(a,b: TVector):TVector;
     function vPoint(SV, DV: TVector; t:Double):TVector;
     function vCrossProduct (a,b: TVector): TVector;
     function vScalarProduct (a,b: TVector): Double;
     function cosmosNormStuetzProdukt (s1,s2,n: TVector): Double;
     function vCheckRelPos(SVg,DVg,SVh,DVh: TVector):Integer;   // SV:=SupportVector, DV=DirectionVector | Results: 0=Error, 1=skew, 2=intersection, 3=parallel
     function vParallelDistance(SVg,DVg,SVh,DVh: TVector): Double;
     function vIntersection(SVg,DVg,SVh,DVh: TVector): TVector;
     function vSkewDistancePoint(SVg,DVg,SVh,DVh: TVector): TVector;
     function vVecToStr(a: TVector): String;


implementation

uses Math;

function vector(x1, x2, x3: Double): TVector;
begin
  result.x1 := x1;
  result.x2 := x2;
  result.x3 := x3;
end;

function vAddition(a, b: TVector):TVector;
begin
  with result do
   begin
    x1 := a.x1 + b.x1;
    x2 := a.x2 + b.x2;
    x3 := a.x3 + b.x3;
   end;
end;

function vSubtraction(a, b: TVector):TVector;
begin
  with result do
   begin
    x1 := b.x1-a.x1;
    x2 := b.x2-a.x2;
    x3 := b.x3-a.x3;
   end;
end;

function sMultiplication(t: Double; a: TVector):TVector;
begin
  with result do
   begin
     x1 :=t*a.x1;
     x2 :=t*a.x2;
     x3 :=t*a.x3;
   end;
end;

function vMakeDirVector(a,b: TVector):TVector;
begin
 result:=vSubtraction(a,b);
end;


function vPoint(SV, DV: TVector; t:Double):TVector;           // SV = support vector; DV = direction vector
begin
 result := vAddition(SV,sMultiplication(t,DV));
end;

function vCrossProduct (a,b: TVector): TVector;
begin
  with result do
  begin
    x1 := a.x2 * b.x3 - a.x3 * b.x2;
    x2 := a.x3 * b.x1 - a.x1 * b.x3;
    x3 := a.x1 * b.x2 - a.x2 * b.x1;
  end;
end;

function vScalarProduct (a,b: TVector): Double;
begin
  result := a.x1 * b.x1 + a.x2 * b.x2 + a.x3 * b.x3;
end;

function cosmosNormStuetzProdukt (s1,s2,n: TVector): Double;
begin
  result := s1.x1 * n.x1 - s2.x1 * n.x1 + s1.x2 * n.x2 - s2.x2 * n.x2 + s1.x3 * n.x3 - s2.x3 * n.x3;
end;


function vCheckRelPos(SVg,DVg,SVh,DVh: TVector):Integer;   //Results: 0=Error, 1=Skew, 2=Intersection, 3=Parallel
var
  collinear,solvable      : Boolean;
  factor,distance,n_k     : Double;
  k,d                     : TVector;

begin
  result:=0;
  try
    collinear:=false;
    solvable:=true;

    if (DVg.x1=0) AND (DVg.x2=0) AND (DVg.x3=0) then    //Error if direction vector = Zero Vector !
      solvable:=false;

    if (DVh.x1=0) AND (DVh.x2=0) AND (DVh.x3=0) then
      solvable:=false;                                  //Error if direction vector = Zero Vector !

    if solvable=true then                               //Check if collinear
    begin
      if (DVh.x1<>0) then
        factor:=DVg.x1/DVh.x1
      else
        if (DVh.x2<>0) then
          factor:=DVg.x2/DVh.x2
        else
          factor:=DVg.x3/DVh.x3;

      if (DVh.x1*factor=DVg.x1) AND (DVh.x2*factor=DVg.x2) AND (DVh.x3*factor=DVg.x3) then
        collinear:=true;

      if (collinear=false) then                       // gaze vectors are not parallel
      begin
        k:=vCrossProduct(DVg,DVh);

        n_k:=sqrt(k.x1*k.x1+k.x2*k.x2+k.x3*k.x3);

        d:=vSubtraction(SVh,SVg);

        distance:=abs(vScalarProduct(d,k))/n_k;
        if (distance<>0) then
        begin
          result:=1;            // Skew
        end
        else
        begin
          result:=2;           // Intersection
        end;
      end
      else
      begin
        result:=3;             // Parallel -> but not identical
      end;
    end
    else
      result:=0;

  except
    on e:Exception do
    raise Exception.CreateFmt('u3dVector: vCheckRelPos [%s]',[e.message]);
  end;
end;


function vParallelDistance(SVg,DVg,SVh,DVh: TVector):Double;
var     k,d     : TVector;
        n_K,n_s : Double;
begin
  result:=0;
  try
    d.x1:=SVg.x1-SVh.x1;
    d.x2:=SVg.x2-SVh.x2;
    d.x3:=SVg.x3-SVh.x3;

    // Calculate cross product
    k.x1:=d.x2*DVh.x3-d.x3*DVh.x2;
    k.x2:=d.x3*DVh.x1-d.x1*DVh.x3;
    k.x3:=d.x1*DVh.x2-d.x2*DVh.x1;

    // Normalize cross produkt
    n_k:=sqrt(k.x1*k.x1+k.x2*k.x2+k.x3*k.x3);
    n_s:=sqrt(DVh.x1*DVh.x1+DVh.x2*DVh.x2+DVh.x3*DVh.x3);

    // Calculate distance
    result:=n_k/n_s;
  except
    on e:Exception do
    raise Exception.CreateFmt('u3dVector: vParallelDistance [%s]',[e.message]);
  end;
end;

function vIntersection(SVg,DVg,SVh,DVh: TVector): TVector;
var
         quotient   : Double;
         sp         : TVector;
         r          : Double;

begin
  result:=vector(0,0,0);
  try

    if (DVh.x1=0) or (DVh.x3=0) then
    begin
      CodeSite.Send('SVG: ['+FloatToStr(SVG.x1)+';'+FloatToStr(SVG.x2)+';'+FloatToStr(SVG.x3)+']');
      CodeSite.Send('DVG: ['+FloatToStr(DVG.x1)+';'+FloatToStr(DVG.x2)+';'+FloatToStr(DVG.x3)+']');
      CodeSite.Send('SVH: ['+FloatToStr(SVH.x1)+';'+FloatToStr(SVH.x2)+';'+FloatToStr(SVH.x3)+']');
      CodeSite.Send('DVH: ['+FloatToStr(DVH.x1)+';'+FloatToStr(DVH.x2)+';'+FloatToStr(DVH.x3)+']');
    end;

    quotient:=(DVg.x1/DVh.x1)-(DVg.x3/DVh.x3);

    if quotient<>0 then
    begin
      r:= ( (SVh.x1/DVh.x1)+(SVg.x3/DVh.x3)-(SVh.x3/DVh.x3)-(SVg.x1/DVh.x1) ) / ( (DVg.x1/DVh.x1)-(DVg.x3/DVh.x3) );
      sp.x1:=SVh.x1+r*DVh.x1;
      sp.x2:=SVh.x2+r*DVh.x2;
      sp.x3:=SVh.x3+r*DVh.x3;
      result:=sp;
    end
    else
      CodeSite.Send('Intersection Quotient = 0');

  except
    on e:Exception do
    raise Exception.CreateFmt('u3dVector: vIntersection [%s]',[e.message]);
  end;
end;

function vSkewDistancePoint(SVg,DVg,SVh,DVh: TVector): TVector;  // SVg=support vector (g); DVg=direction vector(g); SVh=support vector (h); DVh=direction vector(h)
var     ngh,nE1,nE2 : TVector;
        u,v         : Double;
        P,Q         : TVector;

begin
  result:=vector(0,0,0);
  try
    ngh := vCrossProduct(DVg,DVh);            // Normalized vector: cross product of both DV
    nE1 := vCrossProduct(DVg,ngh);            // Normalized vector: plane 1
    nE2 := vCrossProduct(DVh,ngh);            // Normalized vector: plane 2

    u := -cosmosNormStuetzProdukt(SVg,SVh,nE2) / vScalarProduct(DVg,nE2);   // foot of a dropped perpendicular at g
    v :=  cosmosNormStuetzProdukt(SVg,SVh,nE1) / vScalarProduct(DVh,nE1);   // foot of a dropped perpendicular at h


    P := vPoint(SVg,DVg,u);
    Q := vPoint(SVh,DVh,v);

    result:=vector(round((P.x1+Q.x1)/2),round((P.x2+Q.x2)/2),round((P.x3+Q.x3)/2))

  except
    on e:Exception do
    raise Exception.CreateFmt('u3DVector: vSkewDistancePoint [%s]',[e.message]);
  end;

end;


function vVecToStr(a: TVector): String;
begin
  result:='('+FloatToStr(a.x1)+','+FloatToStr(a.x2)+','+FloatToStr(a.x3)+')';
end;

end.
